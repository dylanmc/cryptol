// Not done - only stabbing in the dark about the wrapper functions.
// believed to be good up through the half-round
module ChaCha where

import Salsa20

/*
ChaChaQuarterround : [4][32] -> [4][32]
ChaChaQuarterround [a, b, c, d] = [a'', b'', c'', d''] 
    where {
        a' = a + b;     d' = (d ^ a') <<< 16; 
        c' = c + d';    b' = (b ^ c') <<< 12; 
        a'' = a' + b';  d'' = (d' ^ a'') <<< 8; 
        c'' = c' + d''; b'' = (b' ^ c'') <<< 7; 
    }
*/

ChaChaQuarterround [a, b, c, d] = [a'', b'', c'', d''] where 
    a' = a + b
    d' = (d ^ a') <<< 16
    c' = c + d'
    b' = (b ^ c') <<< 12
    a'' = a' + b'
    d'' = (d' ^ a'') <<< 8
    c'' = c' + d''
    b'' = (b' ^ c'') <<< 7

cols1 = [ 0, 4, 8,  12,
          1, 5, 9,  13,
          2, 6, 10, 14,
          3, 7, 11, 15 ]
cols2 = [ 0, 5, 10, 15,
          1, 6, 11, 12,
          2, 7, 8,  13,
          3, 4, 9,  14 ]

invCols1 = inversePermutation cols1
invCols2 = inversePermutation cols2

// also known as "the matrix" -- corresponds to the "columnround" in Salsa20
ChaChaHalfround (xs:[16][32]) = secondRound where
    firstRound  = join [ ChaChaQuarterround x | x <- groupBy`{4}(xs@@cols1) ]
    xs'' = firstRound @@ invCols1 @@ cols2
    secondRound = (join [ ChaChaQuarterround x | x <- groupBy`{4}xs'']) @@ invCols2

ChaCha : [64][8] -> [64][8]
ChaCha xs = join(ar)
  where
    ar = [ wordendianswap (byteify words) | words <- xw + (zs@0xa) ]
    xw = [ littleendian(xi) | xi <- split xs ]
    zs = [xw] # [ ChaChaHalfround zi  | zi <- zs ]

ChaCha_expansion : {a} (a >= 1, 2 >= a) => ([16*a][8], [16][8]) -> [64][8]
ChaCha_expansion(k, n) = z
  where
    [s0, s1, s2, s3] = split("expand 32-byte k") : [4][4][8]
    [t0, t1, t2, t3] = split("expand 16-byte k") : [4][4][8]
    x = if(`a == 2) then s0 # (take`{16} k) # s1 # n # s2 # (take`{16} k) # s3
                    else t0 # (take`{16} k) # t1 # n # t2 # (take`{16} k) # t3
    z = ChaCha x

ChaCha_encrypt : {a, b} (a >= 1, 2 >= a, fin b) => ([16*a][8], [8][8], [b][8]) -> [b][8]
ChaCha_encrypt(k, v, m) = c
  where
    chacha = take`{b} (join [ ChaCha_expansion(k, v#(split i)) | i <- [0, 1 ... ] ])
    c = m ^ chacha

inversePermutation (perms:[a+1]b) = [ indexOf i perms | i <- [ 0 .. a ] ]

// returns the index of an element in a list - 
// returns 0 if not found (and also if first element)

indexOf e (xs:[a+1]b) = ixs ! 0 where 
    ixs = [ 0 ] #
                 [ if ix == e then j else old 
                 | ix <- xs 
                 | j <- [ 0 .. a ] 
                 | old <- ixs 
                 ]

